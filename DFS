#include<iostream>
#include<list>
using namespace std;

class Graph {
    int V;  // Number of vertices
    list<int> *adj;  // Pointer to an array containing adjacency lists

    // Recursive function for DFS
    void DFSUtil(int v, bool visited[]) {
        visited[v] = true;
        cout << v << " ";

        // Recur for all the vertices adjacent to this vertex
        for(auto i = adj[v].begin(); i != adj[v].end(); ++i) {
            if(!visited[*i]) {
                DFSUtil(*i, visited);
            }
        }
    }

public:
    // Constructor
    Graph(int V) {
        this->V = V;
        adj = new list<int>[V];
    }

    // Add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w);  // Add w to vâ€™s list
    }

    // DFS traversal
    void DFS(int v) {
        // Mark all vertices as not visited
        bool *visited = new bool[V];
        for(int i = 0; i < V; i++) {
            visited[i] = false;
        }

        // Call the recursive function
        DFSUtil(v, visited);
    }
};

int main() {
    Graph g(4);  // Create a graph with 4 vertices
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout << "Depth First Traversal starting from vertex 2:" << endl;
    g.DFS(2);

    return 0;
}
